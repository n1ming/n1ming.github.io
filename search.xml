<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>m3u8下载脚本</title>
      <link href="/2025/03/22/m3u8%E4%B8%8B%E8%BD%BD%E8%84%9A%E6%9C%AC-python/"/>
      <url>/2025/03/22/m3u8%E4%B8%8B%E8%BD%BD%E8%84%9A%E6%9C%AC-python/</url>
      
        <content type="html"><![CDATA[<hr><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests  <span class="comment"># 同步请求</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> tqdm  <span class="comment"># 进度条(迭代)</span></span><br><span class="line"><span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> sync_playwright  <span class="comment"># 同步</span></span><br><span class="line"><span class="keyword">from</span> playwright.async_api <span class="keyword">import</span> async_playwright  <span class="comment"># 异步</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp  <span class="comment"># 异步请求</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> keyboard</span><br><span class="line"><span class="keyword">from</span> tenacity <span class="keyword">import</span> retry, stop_after_attempt  <span class="comment"># 错误重试</span></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 Edg/121.0.0.0&#x27;</span>&#125;</span><br><span class="line">logging.basicConfig(level=logging.INFO, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">m3u8s = []</span><br><span class="line">keys = []</span><br><span class="line">limit = <span class="number">5</span>  <span class="comment"># 限制信号量</span></span><br><span class="line">semaphore = asyncio.Semaphore(limit)  <span class="comment"># 限制最高并发量为5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@retry(<span class="params">stop=stop_after_attempt(<span class="params"><span class="number">5</span></span>)</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scrape_page</span>(<span class="params">url</span>):  <span class="comment"># 解析URL，返回html</span></span><br><span class="line">    <span class="keyword">if</span> url <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(url, headers=headers)</span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">                <span class="keyword">return</span> response.text</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logging.error(<span class="string">&#x27;%s&#x27;</span>, response.status_code)</span><br><span class="line">        <span class="keyword">except</span> requests.RequestException:</span><br><span class="line">            logging.error(<span class="string">&#x27;其他错误!&#x27;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logging.error(<span class="string">&#x27;url为空!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_response</span>(<span class="params">response</span>):  <span class="comment"># 事件监听回调</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;.m3u8&#x27;</span> <span class="keyword">in</span> response.url <span class="keyword">and</span> <span class="string">&#x27;mp4&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> response.url <span class="keyword">and</span> response.status == <span class="number">200</span>:</span><br><span class="line">        m3u8s.append(response.url)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;.key&#x27;</span> <span class="keyword">in</span> response.url <span class="keyword">and</span> response.status == <span class="number">200</span>:  <span class="comment"># 判断m3u8是否加密,一般是AES-128加密方式</span></span><br><span class="line">        keys.append(response.url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_ts</span>(<span class="params">json</span>):  <span class="comment"># 如果判断没有加密，那么直接提取出ts分流(只是一半)</span></span><br><span class="line">    mid_ts_urls = re.findall(<span class="string">r&#x27;#EXTINF:.*?,\n(.*?)\n&#x27;</span>, json, re.S)</span><br><span class="line">    <span class="keyword">if</span> mid_ts_urls <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> ts_urls <span class="keyword">in</span> mid_ts_urls:</span><br><span class="line">            ts_urls = ts_urls.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            full_ts_urls.append(ts_urls)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;http&#x27;</span> <span class="keyword">in</span> full_ts_urls[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;http&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;hls&#x27;</span> <span class="keyword">in</span> full_ts_urls[<span class="number">0</span>]:  <span class="comment"># 判断ts分流的url是不是统一的(有些带日期，有些不带)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;hls&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makefile</span>(<span class="params">name, base_url</span>):  <span class="comment"># 创建相应的动漫文件夹</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        name = name.replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        path = <span class="string">f&#x27;<span class="subst">&#123;base_url&#125;</span>\\<span class="subst">&#123;name&#125;</span>&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">            os.makedirs(path)</span><br><span class="line">            <span class="keyword">return</span> path</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> path</span><br><span class="line">    <span class="keyword">except</span> PermissionError:</span><br><span class="line">        logging.error(PermissionError)</span><br><span class="line">    <span class="keyword">except</span> OSError:</span><br><span class="line">        logging.error(OSError)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_txt</span>(<span class="params">name, path</span>):  <span class="comment"># 检测并创建合并txt</span></span><br><span class="line">    name = name.replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">        txt_path = <span class="string">f&#x27;<span class="subst">&#123;path&#125;</span>\\<span class="subst">&#123;name&#125;</span>.txt&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(txt_path):</span><br><span class="line">            logging.info(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>.txt已经存在&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> txt_path</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(txt_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> os.path.exists(txt_path):</span><br><span class="line">                <span class="keyword">return</span> txt_path</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logging.error(<span class="string">&#x27;txt创建失败&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_data</span>(<span class="params">num, content, path</span>):  <span class="comment"># 这里的path是动漫文件夹的路径, num可用循环</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;<span class="subst">&#123;path&#125;</span>\\<span class="subst">&#123;num&#125;</span>.mp4&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@retry(<span class="params">stop=stop_after_attempt(<span class="params"><span class="number">5</span></span>)</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">translate_bytes</span>(<span class="params">session, num</span>) -&gt; <span class="built_in">list</span>:  <span class="comment"># 参数为ts分流的url  异步函数有阻塞可协程加速</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> semaphore:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(full_ts_urls[num], headers=headers) <span class="keyword">as</span> res:</span><br><span class="line">            <span class="keyword">if</span> res.status == <span class="number">200</span>:</span><br><span class="line">                content = <span class="keyword">await</span> res.read()</span><br><span class="line">                <span class="keyword">return</span> [content, num]  <span class="comment"># 设置阻塞</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                content = requests.get(full_ts_urls[<span class="number">0</span>], headers=headers).content  <span class="comment"># 实在没办法直接舍弃，改为第一个ts</span></span><br><span class="line">                <span class="keyword">return</span> [content, num]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">translate_key</span>(<span class="params">key_url</span>):</span><br><span class="line">    res = requests.get(key_url)</span><br><span class="line">    <span class="keyword">if</span> res.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> res.content</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@retry(<span class="params">stop=stop_after_attempt(<span class="params"><span class="number">5</span></span>)</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decode</span>(<span class="params">encrypted_data, key, m3u8</span>):  <span class="comment"># 参数为ts分流视频的二进制，和秘钥，还有m3u8的文本</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;先判断是否是AES-128加密方式，KEY:METHOD=AES-128  如果是则进行解密。如果不是则捕捉异常，并输出给控制台。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        encryption = re.search(<span class="string">&#x27;KEY:.*?=(.*?),&#x27;</span>, m3u8, re.S).group(<span class="number">1</span>).strip() <span class="keyword">if</span> re.search(<span class="string">&#x27;KEY:.*?=(.*?),&#x27;</span>, m3u8, re.S) <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> encryption <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> encryption == <span class="string">&#x27;AES-128&#x27;</span>:</span><br><span class="line">                <span class="string">&quot;&quot;&quot;AES-128解密&quot;&quot;&quot;</span></span><br><span class="line">                cipher = AES.new(key, AES.MODE_CBC, key)</span><br><span class="line">                data = cipher.decrypt(encrypted_data)</span><br><span class="line">                <span class="keyword">return</span> data  <span class="comment"># 这里返回的data是二进制，直接写入视频格式文件即可解密成功</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logging.info(<span class="string">&#x27;不是AES-128加密，请检查加密方式&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        logging.error(ValueError)</span><br><span class="line">        <span class="built_in">print</span>(encrypted_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_txt</span>(<span class="params">txt_path, path, num</span>):  <span class="comment"># 这里的path是文件夹路径, num与上面用法一样</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(txt_path):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(txt_path, <span class="string">&#x27;a+&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(<span class="string">f&quot;file &#x27;<span class="subst">&#123;path&#125;</span>\\<span class="subst">&#123;num&#125;</span>.mp4&#x27;&quot;</span> + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ffmpeg_combine</span>(<span class="params">video_path, txt_path, name, num</span>):  <span class="comment"># 这里是将txt里的视频路径依次合并，video_path需要用户输入</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;先查找txt_path是否存在，然后再依次合并, 并检查合并好的文件是否存在&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(txt_path):</span><br><span class="line">        name = name.replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        order = <span class="string">f&#x27;ffmpeg -f concat -safe 0 -i <span class="subst">&#123;txt_path&#125;</span> -c copy <span class="subst">&#123;video_path&#125;</span>\\<span class="subst">&#123;name&#125;</span>第<span class="subst">&#123;num&#125;</span>集.mp4 -loglevel quiet&#x27;</span></span><br><span class="line">        subprocess.run(order)</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">f&#x27;<span class="subst">&#123;video_path&#125;</span>\\<span class="subst">&#123;name&#125;</span>第<span class="subst">&#123;num&#125;</span>集.mp4&#x27;</span>):</span><br><span class="line">            logging.info(<span class="string">&#x27;下载成功啦!&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;下载失败了,原因是合并时出现了问题&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logging.error(<span class="string">f&#x27;<span class="subst">&#123;txt_path&#125;</span>不存在，请检查是否创建&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear</span>(<span class="params">file_path, txt_path</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(full_ts_urls)):</span><br><span class="line">            os.remove(<span class="string">f&#x27;<span class="subst">&#123;file_path&#125;</span>\\<span class="subst">&#123;i&#125;</span>.mp4&#x27;</span>)</span><br><span class="line">        os.remove(txt_path)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        logging.error(<span class="string">&#x27;FileNotFoundError!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">cancel_requests</span>(<span class="params">route, request</span>):  <span class="comment"># 网络劫持，取消图片请求，就是js请求</span></span><br><span class="line">    <span class="keyword">await</span> route.abort()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@retry(<span class="params">stop=stop_after_attempt(<span class="params"><span class="number">5</span></span>)</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">listen</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> async_playwright() <span class="keyword">as</span> p:  <span class="comment"># 事件监听</span></span><br><span class="line">        browser = <span class="keyword">await</span> p.firefox.launch(headless=<span class="literal">True</span>, args=[<span class="string">&#x27;--User-Agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 Edg/121.0.0.0&#x27;</span>], executable_path=<span class="string">r&#x27;D:\爬虫脚本\樱花动漫下载器v2.0\firefox\firefox.exe&#x27;</span>)</span><br><span class="line">        <span class="comment"># executable_path=r&#x27;firefox\firefox.exe</span></span><br><span class="line">        page = <span class="keyword">await</span> browser.new_page()</span><br><span class="line">        <span class="keyword">await</span> page.route(re.<span class="built_in">compile</span>(<span class="string">r&#x27;(\.png)|(\.jpg)|(\.ts)&#x27;</span>), cancel_requests)  <span class="comment"># 网络劫持,增加监听速度</span></span><br><span class="line">        page.on(<span class="string">&#x27;response&#x27;</span>, on_response)</span><br><span class="line">        <span class="keyword">await</span> page.goto(url)</span><br><span class="line">        <span class="comment"># page.wait_for_load_state(&#x27;networkidle&#x27;)</span></span><br><span class="line">        <span class="keyword">await</span> browser.close()</span><br><span class="line">        <span class="keyword">if</span> m3u8s:</span><br><span class="line">            <span class="built_in">print</span>(m3u8s[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    repair = []</span><br><span class="line">    repair_num = []</span><br><span class="line">    <span class="keyword">global</span> full_ts_urls</span><br><span class="line">    full_ts_urls = []</span><br><span class="line">    to_verify = <span class="built_in">input</span>(<span class="string">&#x27;你是否要程序自动从网页监听m3u8视频请求?(y or n):&#x27;</span>)</span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&#x27;请输入名称:&#x27;</span>)</span><br><span class="line">    episode = <span class="built_in">input</span>(<span class="string">&#x27;请输入你下载的是第几集:&#x27;</span>)</span><br><span class="line">    base_path = <span class="built_in">input</span>(<span class="string">&#x27;请输入保存路径:&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> to_verify == <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">        input_url = <span class="built_in">input</span>(<span class="string">&#x27;请输入网页url:&#x27;</span>)</span><br><span class="line">        logging.info(<span class="string">&#x27;正在监听网络请求中...(可能稍慢~请耐心等待, 如果失败请检查网络并重新启动)&#x27;</span>)</span><br><span class="line">        <span class="keyword">await</span> listen(input_url)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        input_url = <span class="built_in">input</span>(<span class="string">&#x27;请输入m3u8网址:&#x27;</span>)</span><br><span class="line">        m3u8s.append(input_url)</span><br><span class="line">    <span class="keyword">if</span> m3u8s:</span><br><span class="line">        m3u8 = m3u8s[-<span class="number">1</span>]</span><br><span class="line">        m3u8_text = scrape_page(m3u8)</span><br><span class="line">        file_path = makefile(name, base_path)  <span class="comment"># 创建文件夹 .*?</span></span><br><span class="line">        txt_path = make_txt(name, file_path)  <span class="comment"># 创建txt文档</span></span><br><span class="line">        front_url = re.search(<span class="string">r&#x27;(.*/)([^/]+)\.m3u8$&#x27;</span>, m3u8).group(<span class="number">1</span>).strip() <span class="keyword">if</span> re.search(<span class="string">r&#x27;(.*/)([^/]+)\.m3u8$&#x27;</span>, m3u8) <span class="keyword">else</span> <span class="literal">None</span>  <span class="comment"># 用贪婪匹配最后一个斜线前面的所有内容</span></span><br><span class="line">        <span class="comment"># other_part = re.search(r&#x27;(.*/)([^/]+)\.m3u8$&#x27;, m3u8).group(2).strip() if re.search(r&#x27;(.*/)([^/]+)\.m3u8$&#x27;, m3u8) else None  # 匹配最后一个斜线后面所有的内容</span></span><br><span class="line">        <span class="comment"># if front_url is not None and other_part is not None:</span></span><br><span class="line">        <span class="comment">#    front_url = front_url + other_part</span></span><br><span class="line">        true_false = read_ts(m3u8_text)</span><br><span class="line">        <span class="comment"># print(full_ts_urls)</span></span><br><span class="line">        <span class="keyword">if</span> true_false == <span class="string">&#x27;hls&#x27;</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(full_ts_urls)):</span><br><span class="line">                full_ts_urls[i] = re.sub(<span class="string">&#x27;.*?/hls/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, full_ts_urls[i])</span><br><span class="line">                full_ts_urls[i] = front_url + full_ts_urls[i]</span><br><span class="line">        <span class="keyword">elif</span> true_false == <span class="string">&#x27;http&#x27;</span>:</span><br><span class="line">            <span class="keyword">pass</span>  <span class="comment"># 不做任何事情</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            full_ts_urls = [<span class="string">f&#x27;<span class="subst">&#123;front_url&#125;</span><span class="subst">&#123;url&#125;</span>&#x27;</span> <span class="keyword">for</span> url <span class="keyword">in</span> full_ts_urls]</span><br><span class="line">        <span class="keyword">if</span> keys:</span><br><span class="line">            key_url = keys[-<span class="number">1</span>]</span><br><span class="line">            key = translate_key(key_url)</span><br><span class="line">            <span class="comment"># print(key)</span></span><br><span class="line">            key_start = time.time()</span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession(headers=headers) <span class="keyword">as</span> session:  <span class="comment"># 协程</span></span><br><span class="line">                <span class="comment"># key = await translate_bytes(key_url, session)</span></span><br><span class="line">                <span class="comment"># print(full_ts_urls[0])</span></span><br><span class="line">                tasks = [asyncio.ensure_future(translate_bytes(session, num)) <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(full_ts_urls))]</span><br><span class="line">                <span class="comment">#  contents = await asyncio.gather(*tasks)</span></span><br><span class="line">                pbar = tqdm.tqdm(total=<span class="built_in">len</span>(full_ts_urls))</span><br><span class="line">                <span class="keyword">for</span> coroutine <span class="keyword">in</span> asyncio.as_completed(tasks):</span><br><span class="line">                    content = <span class="keyword">await</span> coroutine</span><br><span class="line">                    <span class="comment"># print(content)</span></span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        data = aes_decode(content[<span class="number">0</span>], key, m3u8_text)  <span class="comment"># 解密(AES-128)</span></span><br><span class="line">                        write_data(content[<span class="number">1</span>], data, file_path)  <span class="comment"># num=content[1]</span></span><br><span class="line">                    <span class="keyword">except</span> TypeError:</span><br><span class="line">                        repair.append(content[<span class="number">0</span>])  <span class="comment"># 如果content列表没有元素怎么办</span></span><br><span class="line">                        repair_num.append(content[<span class="number">1</span>])</span><br><span class="line">                    pbar.update(<span class="number">1</span>)</span><br><span class="line">                pbar.close()</span><br><span class="line">                <span class="comment"># 补救</span></span><br><span class="line">                tried = []  <span class="comment"># 没办法，记录其num</span></span><br><span class="line">                <span class="keyword">if</span> repair_num:</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(repair_num)):</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            data = aes_decode(repair[i], key, m3u8_text)</span><br><span class="line">                            write_data(repair_num[i], data, file_path)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            tried.append(repair_num[i])</span><br><span class="line">                is_tried = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(full_ts_urls)):</span><br><span class="line">                    <span class="keyword">if</span> tried:</span><br><span class="line">                        <span class="keyword">for</span> num <span class="keyword">in</span> tried:</span><br><span class="line">                            <span class="keyword">if</span> i == num:</span><br><span class="line">                                is_tried = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> is_tried:</span><br><span class="line">                        write_txt(txt_path, file_path, i)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        is_tried = <span class="literal">False</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;正在清理内存中...&#x27;</span>)</span><br><span class="line">            ffmpeg_combine(file_path, txt_path, name, episode)</span><br><span class="line">            clear(file_path, txt_path)</span><br><span class="line">            key_end = time.time()</span><br><span class="line">            total_time = (key_end - key_start) / <span class="number">60</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;用时:&#x27;</span> + <span class="string">f&#x27;<span class="subst">&#123;total_time&#125;</span>min&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 没有加密</span></span><br><span class="line">            no_key_start = time.time()</span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession(headers=headers) <span class="keyword">as</span> session:  <span class="comment"># 协程</span></span><br><span class="line">                tasks = [asyncio.ensure_future(translate_bytes(session, num)) <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(full_ts_urls))]</span><br><span class="line">                <span class="comment">#  contents = await asyncio.gather(*tasks)</span></span><br><span class="line">                pbar = tqdm.tqdm(total=<span class="built_in">len</span>(full_ts_urls))</span><br><span class="line">                <span class="keyword">for</span> coroutine <span class="keyword">in</span> asyncio.as_completed(tasks):</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        content = <span class="keyword">await</span> coroutine</span><br><span class="line">                        write_data(content[<span class="number">1</span>], content[<span class="number">0</span>], file_path)  <span class="comment"># 写入解密后的数据</span></span><br><span class="line">                    <span class="keyword">except</span> TypeError:</span><br><span class="line">                        repair.append(content[<span class="number">0</span>])</span><br><span class="line">                        repair_num.append(content[<span class="number">1</span>])</span><br><span class="line">                    pbar.update(<span class="number">1</span>)</span><br><span class="line">                pbar.close()</span><br><span class="line">                <span class="comment"># 补救</span></span><br><span class="line">                tried = []  <span class="comment"># 没办法，记录其num</span></span><br><span class="line">                <span class="keyword">if</span> repair_num:</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(repair_num)):</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            write_data(repair_num[i], repair[i], file_path)</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            tried.append(repair_num[i])</span><br><span class="line">                is_tried = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(full_ts_urls)):</span><br><span class="line">                    <span class="keyword">if</span> tried:</span><br><span class="line">                        <span class="keyword">for</span> num <span class="keyword">in</span> tried:</span><br><span class="line">                            <span class="keyword">if</span> i == num:</span><br><span class="line">                                is_tried = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> is_tried:</span><br><span class="line">                        write_txt(txt_path, file_path, i)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        is_tried = <span class="literal">False</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;正在清理内存中...&#x27;</span>)</span><br><span class="line">            ffmpeg_combine(file_path, txt_path, name, episode)</span><br><span class="line">            clear(file_path, txt_path)</span><br><span class="line">            no_key_end = time.time()</span><br><span class="line">            total_time = (no_key_end - no_key_start) / <span class="number">60</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;用时:&#x27;</span> + <span class="string">f&#x27;<span class="subst">&#123;total_time&#125;</span>min&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;动漫已经失效&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(main())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;按ESC结束进程~o( =∩ω∩= )m&#x27;</span>)</span><br><span class="line">    keyboard.wait(<span class="string">&#x27;Esc&#x27;</span>)</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
